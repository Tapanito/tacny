// invariant idx <= a.Length
tactic strength_guard() {  
  tvar guard :| guard in loop_guard();
  tvar m := map["<" := "<=", ">" := ">="];  
  invariant (replace_operator(guard, m));
}

tactic prop_post() { 
  tvar post :| post in postconditions();
  tvar inv :| inv in split(post, "&&");
  invariant (inv);
}

tactic constant_to_variable() { 
  tvar post :| post in postconditions();
  tvar post' :| post' in split(post, "&&");
  tvar inv := replace_constants(post', consts(post'), variables());
  invariant (inv);
}

tactic GvdS_approach() { 
  strength_guard();
  prop_post();
  constant_to_variable();
}

method FindMax(a: array<int>) returns (i: int)
   // Annotate this method with pre- and postconditions
   // that ensure it behaves as described.
   requires a != null
   requires a.Length > 0
   ensures (0 <= i < a.Length) && (forall k :: 0 <= k < a.Length ==> a[i] >= a[k])
{
   var idx := 0;
   var j := idx;
   i := idx;
   while (idx < a.Length)
   GvdS_approach();
   // invariant idx <= a.Length
   // invariant 0 <= i < a.Length //propagate
   // invariant forall k :: 0 <= k < idx ==> a[i] >= a[k] 
   {
     if (a[idx] > a [i]) { i := idx; }
     idx := idx + 1;
   }
}
