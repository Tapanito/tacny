namespace LazyTacny
{
    using Microsoft.Boogie;
    using Microsoft.Dafny;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Diagnostics.Contracts;
    using System.Linq;
    using System.Numerics;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Threading;
    using Tacny;
    using Util;

    public class Atomic
    {
        public Tacny.DynamicContext DynamicContext;
        public bool IsFunction;
        private Strategy SearchStrat;
        public readonly Tacny.StaticContext StaticContext;

        public Atomic()
        {
            this.SearchStrat = Strategy.BFS;
            this.IsFunction = false;
            this.DynamicContext = new Tacny.DynamicContext();
            this.StaticContext = new Tacny.StaticContext();
        }

        protected Atomic(LazyTacny.Atomic ac)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(ac > null, null, "ac != null");
            this.SearchStrat = Strategy.BFS;
            this.IsFunction = false;
            this.DynamicContext = ac.DynamicContext;
            this.StaticContext = ac.StaticContext;
            this.SearchStrat = ac.SearchStrat;
        }

        public Atomic(MemberDecl md, ITactic tactic, UpdateStmt tac_call, Tacny.Program program)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(md > null, null, "md != null");
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(tactic > null, null, "tactic != null");
            this.SearchStrat = Strategy.BFS;
            this.IsFunction = false;
            this.DynamicContext = new Tacny.DynamicContext(md, tactic, tac_call);
            this.StaticContext = new Tacny.StaticContext(md, tac_call, program);
        }

        public Atomic(MemberDecl md, ITactic tac, UpdateStmt tac_call, Tacny.StaticContext globalContext)
        {
            this.SearchStrat = Strategy.BFS;
            this.IsFunction = false;
            this.DynamicContext = new Tacny.DynamicContext(md, tac, tac_call);
            this.StaticContext = globalContext;
        }

        public Atomic(Tacny.DynamicContext localContext, Tacny.StaticContext globalContext, Strategy searchStrategy, bool isFunction)
        {
            this.SearchStrat = Strategy.BFS;
            this.IsFunction = false;
            this.StaticContext = globalContext;
            this.DynamicContext = localContext.Copy();
            this.SearchStrat = searchStrategy;
            this.IsFunction = isFunction;
        }

        public void AddLocal(IVariable lv, object value)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(lv > null, null, "lv != null");
            this.DynamicContext.AddLocal(lv, value);
        }

        public LazyTacny.Solution AddNewLocal<T>(IVariable variable, T value) where T: class
        {
            LazyTacny.Atomic state = this.Copy();
            state.AddLocal(variable, value);
            return new LazyTacny.Solution(state, null);
        }

        public LazyTacny.Solution AddNewStatement<T>(T oldValue, T newValue) where T: Statement
        {
            LazyTacny.Atomic state = this.Copy();
            state.AddUpdated(oldValue, newValue);
            return new LazyTacny.Solution(state, null);
        }

        public void AddUpdated(Statement key, Statement value)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires((key != null) && (value > null), null, "key != null && value != null");
            this.DynamicContext.AddUpdated(key, value);
        }

        protected IEnumerable<LazyTacny.Solution> CallAction(object call, LazyTacny.Solution solution)
        {
            using (this.<>s__1 = this.CallAtomic(call, solution).GetEnumerator())
            {
                while (this.<>s__1.MoveNext())
                {
                    this.<item>5__2 = this.<>s__1.Current;
                    this.StaticContext.program.IncTotalBranchCount(this.StaticContext.program.currentDebug);
                    yield return this.<item>5__2;
                    this.<item>5__2 = null;
                }
            }
            this.<>s__1 = null;
        }

        protected IEnumerable<LazyTacny.Solution> CallAtomic(object call, LazyTacny.Solution solution)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(call > null, null, "call != null");
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(solution > null, null, "solution != null");
            return new <CallAtomic>d__18(-2) { 
                <>4__this = this,
                <>3__call = call,
                <>3__solution = solution
            };
        }

        private LazyTacny.Solution CallDefaultAction(Statement st)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(st > null, null, "st != null");
            LazyTacny.Atomic state = this.Copy();
            state.AddUpdated(st, st);
            return new LazyTacny.Solution(state, null);
        }

        public LazyTacny.Atomic Copy()
        {
            LazyTacny.Atomic atomic2 = new LazyTacny.Atomic(this.DynamicContext, this.StaticContext, this.SearchStrat, this.IsFunction);
            System.Diagnostics.Contracts.__ContractsRuntime.Ensures(atomic2 > null, null, "Contract.Result<Atomic>() != null");
            return atomic2;
        }

        protected static Token CreateToken(string val, int line, int col) => 
            new Token(line, col) { val = val };

        public bool EvaluateEqualityExpression(ExpressionTree expt)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(expt > null, null, "expt != null");
            if (expt.IsLeaf())
            {
                Microsoft.Dafny.LiteralExpr expr = this.EvaluateLeaf(expt) as Microsoft.Dafny.LiteralExpr;
                return ((expr.Value is bool) ? ((bool) expr.Value) : false);
            }
            if ((expt.lChild != null) && (expt.rChild == null))
            {
                return this.EvaluateEqualityExpression(expt.lChild);
            }
            if (expt.lChild.IsLeaf() && expt.rChild.IsLeaf())
            {
                Microsoft.Dafny.LiteralExpr expr2 = null;
                Microsoft.Dafny.LiteralExpr expr3 = null;
                expr2 = this.EvaluateLeaf(expt.lChild) as Microsoft.Dafny.LiteralExpr;
                expr3 = this.EvaluateLeaf(expt.rChild) as Microsoft.Dafny.LiteralExpr;
                if (!expr2.GetType().Equals(expr3.GetType()))
                {
                    return false;
                }
                BinaryExpr expr4 = tcce.NonNull<BinaryExpr>(expt.data as BinaryExpr);
                int num = -1;
                if (expr2.Value is BigInteger)
                {
                    BigInteger integer = (BigInteger) expr2.Value;
                    BigInteger other = (BigInteger) expr3.Value;
                    num = integer.CompareTo(other);
                }
                else if (expr2.Value is string)
                {
                    string str = expr2.Value as string;
                    string strB = expr3.Value as string;
                    num = str.CompareTo(strB);
                }
                else if (expr2.Value is bool)
                {
                    num = ((bool) expr2.Value).CompareTo((bool) expr3.Value);
                }
                if (expr4.Op == BinaryExpr.Opcode.Eq)
                {
                    return (num == 0);
                }
                if (expr4.Op == BinaryExpr.Opcode.Neq)
                {
                    return (num > 0);
                }
                if (expr4.Op == BinaryExpr.Opcode.Ge)
                {
                    return (num >= 0);
                }
                if (expr4.Op == BinaryExpr.Opcode.Gt)
                {
                    return (num > 0);
                }
                if (expr4.Op == BinaryExpr.Opcode.Le)
                {
                    return (num <= 0);
                }
                if (expr4.Op == BinaryExpr.Opcode.Lt)
                {
                    return (num < 0);
                }
            }
            else
            {
                BinaryExpr expr5 = tcce.NonNull<BinaryExpr>(expt.data as BinaryExpr);
                if (expr5.Op == BinaryExpr.Opcode.And)
                {
                    return (this.EvaluateEqualityExpression(expt.lChild) && this.EvaluateEqualityExpression(expt.rChild));
                }
                if (expr5.Op == BinaryExpr.Opcode.Or)
                {
                    return (this.EvaluateEqualityExpression(expt.lChild) || this.EvaluateEqualityExpression(expt.rChild));
                }
            }
            return false;
        }

        protected Expression EvaluateExpression(ExpressionTree expt)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(expt > null, null, "expt != null");
            if (expt.IsLeaf())
            {
                return (this.EvaluateLeaf(expt) as Microsoft.Dafny.LiteralExpr);
            }
            BinaryExpr expr = tcce.NonNull<BinaryExpr>(expt.data as BinaryExpr);
            if (BinaryExpr.IsEqualityOp(expr.Op))
            {
                return new Microsoft.Dafny.LiteralExpr(new Token(), this.EvaluateEqualityExpression(expt));
            }
            Microsoft.Dafny.LiteralExpr expr2 = this.EvaluateExpression(expt.lChild) as Microsoft.Dafny.LiteralExpr;
            Microsoft.Dafny.LiteralExpr expr3 = this.EvaluateExpression(expt.rChild) as Microsoft.Dafny.LiteralExpr;
            BigInteger left = (BigInteger) expr2.Value;
            BigInteger right = (BigInteger) expr3.Value;
            BigInteger n = 0;
            switch (expr.Op)
            {
                case BinaryExpr.Opcode.Add:
                    n = BigInteger.Add(left, right);
                    break;

                case BinaryExpr.Opcode.Sub:
                    n = BigInteger.Subtract(left, right);
                    break;

                case BinaryExpr.Opcode.Mul:
                    n = BigInteger.Multiply(left, right);
                    break;

                case BinaryExpr.Opcode.Div:
                    n = BigInteger.Divide(left, right);
                    break;
            }
            return new Microsoft.Dafny.LiteralExpr(expr2.tok, n);
        }

        protected object EvaluateLeaf(ExpressionTree expt)
        {
            if (System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation <= 4)
            {
                try
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation++;
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires((expt != null) && expt.IsLeaf(), null, "expt != null && expt.IsLeaf()");
                }
                finally
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation--;
                }
            }
            if ((expt.data is NameSegment) || (expt.data is ApplySuffix))
            {
                using (IEnumerator<object> enumerator = this.ProcessStmtArgument(expt.data).GetEnumerator())
                {
                    while (enumerator.MoveNext())
                    {
                        return enumerator.Current;
                    }
                }
            }
            else if (expt.data is Microsoft.Dafny.LiteralExpr)
            {
                return expt.data;
            }
            return null;
        }

        public void FillTacticInputs()
        {
            this.DynamicContext.FillTacticInputs();
        }

        public void Fin()
        {
            this.StaticContext.resolved.Clear();
            this.StaticContext.resolved.AddRange(this.DynamicContext.generatedStatements.Values.ToArray<Statement>());
            this.StaticContext.newTarget = this.DynamicContext.newTarget;
        }

        protected static WhileStmt FindWhileStmt(Statement tac_stmt, MemberDecl member)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(tac_stmt > null, null, "tac_stmt != null");
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(member > null, null, "member != null");
            Method method = (Method) member;
            int index = method.Body.Body.IndexOf(tac_stmt);
            if (index > 0)
            {
                while (index >= 0)
                {
                    Statement statement = method.Body.Body[index];
                    WhileStmt stmt2 = statement as WhileStmt;
                    if (stmt2 > null)
                    {
                        return stmt2;
                    }
                    index--;
                }
            }
            return null;
        }

        protected IEnumerable<ExpressionTree> GenerateExpressionTree(ExpressionTree tree, Dictionary<ExpressionTree, IEnumerable<object>> leafResolvers)
        {
            this.<kvp>5__1 = leafResolvers.FirstOrDefault<KeyValuePair<ExpressionTree, IEnumerable<object>>>();
            if (this.<kvp>5__1.Equals(new KeyValuePair<ExpressionTree, IEnumerable<object>>()))
            {
                yield return tree;
            }
            leafResolvers.Remove(this.<kvp>5__1.Key);
            using (this.<>s__2 = this.<kvp>5__1.Value.GetEnumerator())
            {
                while (this.<>s__2.MoveNext())
                {
                    this.<value>5__3 = this.<>s__2.Current;
                    this.<newValue>5__4 = null;
                    if (this.<value>5__3 is Expression)
                    {
                        this.<newValue>5__4 = this.<value>5__3 as Expression;
                    }
                    else if (this.<value>5__3 is IVariable)
                    {
                        this.<newValue>5__4 = IVariableToExpression(this.<value>5__3 as IVariable);
                    }
                    else
                    {
                        System.Diagnostics.Contracts.__ContractsRuntime.Assert(false, "Sum tin wong", "false");
                    }
                    this.<newLeaf>5__5 = ExpressionTree.ExpressionToTree(this.<newValue>5__4);
                    this.<newTree>5__6 = ExpressionTree.FindAndReplaceNode(tree, this.<newLeaf>5__5, this.<kvp>5__1.Key);
                    using (this.<>s__7 = this.GenerateExpressionTree(this.<newTree>5__6, leafResolvers).GetEnumerator())
                    {
                        while (this.<>s__7.MoveNext())
                        {
                            this.<result>5__8 = this.<>s__7.Current;
                            yield return this.<result>5__8;
                            this.<result>5__8 = null;
                        }
                    }
                    this.<>s__7 = null;
                    this.<newValue>5__4 = null;
                    this.<newLeaf>5__5 = null;
                    this.<newTree>5__6 = null;
                    this.<value>5__3 = null;
                }
            }
            this.<>s__2 = null;
        }

        [Pure]
        protected Microsoft.Dafny.LocalVariable GenerateFreshLocalVariable(NameSegment ns)
        {
            int num = this.DynamicContext.localDeclarations.Count<KeyValuePair<IVariable, object>>(i => i.Key.Name == ns.Name);
            return new Microsoft.Dafny.LocalVariable(ns.tok, ns.tok, $"{ns.Name}_{num}", new ObjectType(), true);
        }

        public List<Statement> GetAllUpdated()
        {
            List<Statement> list2 = this.DynamicContext.GetAllUpdated();
            System.Diagnostics.Contracts.__ContractsRuntime.Ensures(list2 > null, null, "Contract.Result<List<Statement>>() != null");
            return list2;
        }

        protected static List<Expression> GetCallArguments(UpdateStmt us)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(us > null, null, "us != null");
            ExprRhs rhs = (ExprRhs) us.Rhss[0];
            return ((ApplySuffix) rhs.Expr).Args;
        }

        [Pure]
        protected IVariable GetLocalKeyByName(NameSegment ns)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(ns > null, null, "ns != null");
            return this.DynamicContext.GetLocalKeyByName(ns.Name);
        }

        [Pure]
        protected IVariable GetLocalKeyByName(string name)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(name > null, null, "name != null");
            return this.DynamicContext.GetLocalKeyByName(name);
        }

        [Pure]
        protected object GetLocalValueByName(IVariable variable)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(variable > null, null, "variable != null");
            return this.DynamicContext.GetLocalValueByName(variable);
        }

        [Pure]
        protected object GetLocalValueByName(NameSegment ns)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(ns > null, null, "ns != null");
            return this.DynamicContext.GetLocalValueByName(ns.Name);
        }

        [Pure]
        protected object GetLocalValueByName(string name)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(name > null, null, "name != null");
            return this.DynamicContext.GetLocalValueByName(name);
        }

        [Pure]
        protected static NameSegment GetNameSegment(ApplySuffix aps) => 
            ((aps != null) ? (aps.Lhs as NameSegment) : null);

        [Pure]
        protected static NameSegment GetNameSegment(UpdateStmt us)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(us > null, null, "us != null");
            ExprRhs rhs = us.Rhss[0] as ExprRhs;
            if (rhs == null)
            {
                return null;
            }
            return GetNameSegment(rhs.Expr as ApplySuffix);
        }

        public MemberDecl GetNewTarget() => 
            this.DynamicContext.newTarget;

        [Pure]
        public List<Statement> GetResolved() => 
            this.StaticContext.resolved;

        public Dictionary<Statement, Statement> GetResult() => 
            this.DynamicContext.generatedStatements;

        [Pure]
        public UpdateStmt GetTacticCall() => 
            this.DynamicContext.tac_call;

        public Statement GetUpdated(Statement key)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(key > null, null, "key != null");
            return this.DynamicContext.GetUpdated(key);
        }

        [Pure]
        protected bool HasLocalWithName(NameSegment ns)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(ns > null, null, "ns != null");
            return this.DynamicContext.HasLocalWithName(ns);
        }

        protected void InitArgs(Statement st, out List<Expression> call_arguments)
        {
            IVariable variable;
            ref List<Expression> listRef;
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(st > null, null, "st != null");
            try
            {
                listRef = call_arguments;
            }
            catch (Exception exception1)
            {
                if (exception1 == null)
                {
                    throw;
                }
            }
            this.InitArgs(st, out variable, out call_arguments);
            System.Diagnostics.Contracts.__ContractsRuntime.Ensures(listRef > null, null, "Contract.ValueAtReturn<List<Expression>>(out call_arguments) != null");
        }

        protected void InitArgs(Statement st, out IVariable lv, out List<Expression> call_arguments)
        {
            ref List<Expression> listRef;
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(st > null, null, "st != null");
            try
            {
                listRef = call_arguments;
            }
            catch (Exception exception1)
            {
                if (exception1 == null)
                {
                    throw;
                }
            }
            lv = null;
            call_arguments = null;
            TacticVarDeclStmt stmt = null;
            UpdateStmt us = null;
            TacnyBlockStmt stmt3 = null;
            if (st is VarDeclStmt)
            {
                System.Diagnostics.Contracts.__ContractsRuntime.Assert(false, Util.Error.MkErr(st, 13, new object[0]), "false");
            }
            stmt = st as TacticVarDeclStmt;
            if (stmt > null)
            {
                lv = stmt.Locals[0];
                call_arguments = GetCallArguments(stmt.Update as UpdateStmt);
            }
            else
            {
                us = st as UpdateStmt;
                if (us > null)
                {
                    if (us.Lhss.Count == 0)
                    {
                        call_arguments = GetCallArguments(us);
                    }
                    else
                    {
                        NameSegment ns = (NameSegment) us.Lhss[0];
                        if (this.HasLocalWithName(ns))
                        {
                            lv = this.GetLocalKeyByName(ns);
                            call_arguments = GetCallArguments(us);
                        }
                        else
                        {
                            object[] args = new object[] { ns.Name };
                            Util.Printer.Error(st, "Local variable {0} is not declared", args);
                        }
                    }
                }
                else
                {
                    stmt3 = st as TacnyBlockStmt;
                    if (stmt3 > null)
                    {
                        ParensExpression guard = stmt3.Guard as ParensExpression;
                        if (guard > null)
                        {
                            List<Expression> list1 = new List<Expression> {
                                guard.E
                            };
                            call_arguments = list1;
                        }
                        else
                        {
                            List<Expression> list2 = new List<Expression> {
                                stmt3.Guard
                            };
                            call_arguments = list2;
                        }
                    }
                    else
                    {
                        object[] objArray2 = new object[] { 1, 0 };
                        Util.Printer.Error(st, "Wrong number of method result arguments; Expected {0} got {1}", objArray2);
                    }
                }
            }
            System.Diagnostics.Contracts.__ContractsRuntime.Ensures(listRef > null, null, "Contract.ValueAtReturn<List<Expression>>(out call_arguments) != null");
        }

        public void Initialize()
        {
        }

        [Pure]
        protected bool IsArgumentApplication(ApplySuffix aps)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(aps > null, null, "aps != null");
            NameSegment nameSegment = GetNameSegment(aps);
            return this.IsArgumentApplication(nameSegment);
        }

        [Pure]
        protected bool IsArgumentApplication(NameSegment ns)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(ns > null, null, "ns != null");
            return this.DynamicContext.HasLocalWithName(ns);
        }

        [Pure]
        protected bool IsArgumentApplication(UpdateStmt us)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(us > null, null, "us != null");
            NameSegment nameSegment = GetNameSegment(us);
            return this.IsArgumentApplication(nameSegment);
        }

        [Pure]
        protected static bool IsLocalAssignment(UpdateStmt us) => 
            ((us.Lhss.Count > 0) && (us.Rhss.Count > 0));

        [Pure]
        protected bool IsResolvable(ExpressionTree expt)
        {
            if (System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation <= 4)
            {
                try
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation++;
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires(expt.isRoot(), null, "expt.isRoot()");
                }
                finally
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation--;
                }
            }
            List<Expression> leafData = expt.GetLeafData();
            foreach (Expression expression in leafData)
            {
                if (expression is NameSegment)
                {
                    NameSegment ns = expression as NameSegment;
                    if (!(this.GetLocalValueByName(ns) is Microsoft.Dafny.LiteralExpr))
                    {
                        return false;
                    }
                }
                else if (!(expression is Microsoft.Dafny.LiteralExpr))
                {
                    if (expression is ApplySuffix)
                    {
                        if (this.StaticContext.program.IsTacticCall(expression as ApplySuffix) || this.IsArgumentApplication(expression as ApplySuffix))
                        {
                            foreach (object obj3 in this.ProcessStmtArgument(expression))
                            {
                            }
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        [Pure]
        public static Expression IVariableToExpression(IVariable variable)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(variable > null, null, "variable != null");
            return new NameSegment(variable.Tok, variable.Name, null);
        }

        public IEnumerable<object> ProcessStmtArgument(Expression argument)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(argument > null, null, "argument != null");
            return new <ProcessStmtArgument>d__19(-2) { 
                <>4__this = this,
                <>3__argument = argument
            };
        }

        public void RegisterLocals(DatatypeDecl datatype, int index, Dictionary<string, Microsoft.Dafny.Type> ctorTypes = null)
        {
            if (System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation <= 4)
            {
                try
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation++;
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires(datatype > null, null, "datatype != null");
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires((index + 1) <= datatype.Ctors.Count, null, "index + 1 <= datatype.Ctors.Count");
                }
                finally
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation--;
                }
            }
            foreach (Microsoft.Dafny.Formal formal in datatype.Ctors[index].Formals)
            {
                if (ctorTypes > null)
                {
                    UserDefinedType type = formal.Type as UserDefinedType;
                    if (type > null)
                    {
                        if (ctorTypes.ContainsKey(type.Name))
                        {
                            Microsoft.Dafny.Formal variable = new Microsoft.Dafny.Formal(formal.Tok, formal.Name, ctorTypes[type.Name], formal.InParam, formal.IsGhost);
                            this.StaticContext.RegsiterGlobalVariable(variable);
                        }
                        else
                        {
                            this.StaticContext.RegsiterGlobalVariable(formal);
                        }
                    }
                    else
                    {
                        this.StaticContext.RegsiterGlobalVariable(formal);
                    }
                }
                else
                {
                    this.StaticContext.RegsiterGlobalVariable(formal);
                }
            }
        }

        private IEnumerable<LazyTacny.Solution> RegisterLocalVariable(TacticVarDeclStmt declaration)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(declaration > null, null, "declaration != null");
            return new <RegisterLocalVariable>d__20(-2) { 
                <>4__this = this,
                <>3__declaration = declaration
            };
        }

        public void RemoveLocals(DatatypeDecl datatype, int index)
        {
            if (System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation <= 4)
            {
                try
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation++;
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires(datatype > null, null, "datatype != null");
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires((index + 1) <= datatype.Ctors.Count, null, "index + 1 <= datatype.Ctors.Count");
                }
                finally
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation--;
                }
            }
            foreach (Microsoft.Dafny.Formal formal in datatype.Ctors[index].Formals)
            {
                this.StaticContext.RemoveGlobalVariable(formal);
            }
        }

        public void RemoveUpdated(Statement key)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(key > null, null, "key != null");
            this.DynamicContext.RemoveUpdated(key);
        }

        protected List<Statement> ReplaceCurrentAtomic(Statement newStatement)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(newStatement > null, null, "newStatement != null");
            int counter = this.DynamicContext.GetCounter();
            List<Statement> freshTacticBody = this.DynamicContext.GetFreshTacticBody();
            freshTacticBody[counter] = newStatement;
            List<Statement> list3 = freshTacticBody;
            System.Diagnostics.Contracts.__ContractsRuntime.Ensures(list3 > null, null, "Contract.Result<List<Statement>>() != null");
            return list3;
        }

        protected List<Statement> ReplaceCurrentAtomic(List<Statement> list)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(list > null, null, "list != null");
            int counter = this.DynamicContext.GetCounter();
            List<Statement> freshTacticBody = this.DynamicContext.GetFreshTacticBody();
            freshTacticBody.RemoveAt(counter);
            freshTacticBody.InsertRange(counter, list);
            List<Statement> list4 = freshTacticBody;
            System.Diagnostics.Contracts.__ContractsRuntime.Ensures(list4 > null, null, "Contract.Result<List<Statement>>() != null");
            return list4;
        }

        public bool ResolveAndVerify(LazyTacny.Solution solution)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(solution > null, null, "solution != null");
            Microsoft.Dafny.Program prog = this.StaticContext.program.ParseProgram();
            solution.GenerateProgram(ref prog, false);
            this.StaticContext.program.ClearBody(this.DynamicContext.md);
            if (!this.StaticContext.program.ResolveProgram())
            {
                return false;
            }
            this.StaticContext.program.VerifyProgram();
            return true;
        }

        public IEnumerable<LazyTacny.Solution> ResolveBody(BlockStmt body)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(body > null, null, "body != null");
            return new <ResolveBody>d__15(-2) { 
                <>4__this = this,
                <>3__body = body
            };
        }

        protected IEnumerable<ExpressionTree> ResolveExpression(ExpressionTree expression)
        {
            List<ExpressionTree> leafs = expression.GetLeafs();
            Dictionary<ExpressionTree, IEnumerable<object>> leafResolvers = new Dictionary<ExpressionTree, IEnumerable<object>>();
            foreach (ExpressionTree tree in leafs)
            {
                leafResolvers.Add(tree, this.ProcessStmtArgument(tree.TreeToExpression()));
            }
            return this.GenerateExpressionTree(expression, leafResolvers);
        }

        protected void ResolveExpression(ref ExpressionTree guard)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(guard > null, null, "guard != null");
            if (guard.IsLeaf())
            {
                object obj2 = this.EvaluateLeaf(guard);
                if (guard.data is NameSegment)
                {
                    Expression expression;
                    System.Diagnostics.Contracts.__ContractsRuntime.Assert(obj2 > null, null, "result != null");
                    if (obj2 is MemberDecl)
                    {
                        MemberDecl decl = obj2 as MemberDecl;
                        expression = new StringLiteralExpr(new Token(), decl.Name, true);
                    }
                    else if (obj2 is Microsoft.Dafny.Formal)
                    {
                        Microsoft.Dafny.Formal formal = obj2 as Microsoft.Dafny.Formal;
                        expression = new NameSegment(formal.tok, formal.Name, null);
                    }
                    else if (obj2 is NameSegment)
                    {
                        expression = obj2 as NameSegment;
                    }
                    else
                    {
                        expression = obj2 as Expression;
                    }
                    guard.data = expression;
                }
            }
            else
            {
                this.ResolveExpression(ref guard.lChild);
                if (guard.rChild > null)
                {
                    this.ResolveExpression(ref guard.rChild);
                }
            }
        }

        private IEnumerable<LazyTacny.Solution> ResolveNestedTacticCall(ITactic tactic, ApplySuffix aps)
        {
            List<AssignmentRhs> rhss = new List<AssignmentRhs> {
                new ExprRhs(aps, null)
            };
            UpdateStmt stmt = new UpdateStmt(aps.tok, aps.tok, new List<Expression>(), rhss);
            LazyTacny.Atomic atomic = new LazyTacny.Atomic(this.DynamicContext.md, tactic, stmt, this.StaticContext);
            List<Expression> args = aps.Args;
            System.Diagnostics.Contracts.__ContractsRuntime.Assert(args.Count == atomic.DynamicContext.tactic.Ins.Count, null, "exps.Count == atomic.DynamicContext.tactic.Ins.Count");
            atomic.SetNewTarget(this.GetNewTarget());
            for (int i = 0; i < args.Count; i++)
            {
                foreach (object obj2 in this.ProcessStmtArgument(args[i]))
                {
                    atomic.AddLocal(atomic.DynamicContext.tactic.Ins[i], obj2);
                }
            }
            return ResolveTactic(atomic, false);
        }

        public static IEnumerable<LazyTacny.Solution> ResolveStatement(LazyTacny.Solution solution)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires<ArgumentNullException>(solution > null, null, "solution != null");
            return new <ResolveStatement>d__16(-2) { <>3__solution = solution };
        }

        public static IEnumerable<LazyTacny.Solution> ResolveTactic(LazyTacny.Atomic atomic, bool verify = true)
        {
            ITactic tac = atomic.DynamicContext.tactic;
            if (tac is TacticFunction)
            {
                atomic.IsFunction = true;
                return ResolveTacticFunction(atomic);
            }
            atomic.SearchStrat = SearchStrategy.GetSearchStrategy(tac);
            return ResolveTacticMethod(atomic, verify);
        }

        public static LazyTacny.Solution ResolveTactic(ITactic tac, UpdateStmt tac_call, MemberDecl md, Tacny.Program tacnyProgram, List<IVariable> variables, List<IVariable> resolved)
        {
            if (System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation <= 4)
            {
                try
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation++;
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires(tac > null, null, "tac != null");
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires(tac_call > null, null, "tac_call != null");
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires(md > null, null, "md != null");
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires(tacnyProgram > null, null, "tacnyProgram != null");
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires(tcce.NonNullElements<IVariable>(variables), null, "tcce.NonNullElements<IVariable>(variables)");
                    System.Diagnostics.Contracts.__ContractsRuntime.Requires(tcce.NonNullElements<IVariable>(resolved), null, "tcce.NonNullElements<IVariable>(resolved)");
                }
                finally
                {
                    System.Diagnostics.Contracts.__ContractsRuntime.insideContractEvaluation--;
                }
            }
            LazyTacny.Atomic atomic = new LazyTacny.Atomic(md, tac, tac_call, tacnyProgram);
            atomic.StaticContext.RegsiterGlobalVariables(variables, resolved);
            using (IEnumerator<LazyTacny.Solution> enumerator = ResolveTactic(atomic, true).GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    return enumerator.Current;
                }
            }
            return null;
        }

        public static IEnumerable<LazyTacny.Solution> ResolveTacticFunction(LazyTacny.Atomic atomic)
        {
            this.<tacFun>5__1 = atomic.DynamicContext.tactic as TacticFunction;
            this.<expt>5__2 = ExpressionTree.ExpressionToTree(this.<tacFun>5__1.Body);
            using (this.<>s__3 = atomic.ResolveTacticFunction(this.<expt>5__2).GetEnumerator())
            {
                while (this.<>s__3.MoveNext())
                {
                    this.<result>5__4 = this.<>s__3.Current;
                    this.<ac>5__5 = atomic.Copy();
                    this.<ac>5__5.DynamicContext.generatedExpressions.Add(this.<result>5__4.TreeToExpression());
                    yield return new LazyTacny.Solution(this.<ac>5__5, null);
                    this.<ac>5__5 = null;
                    this.<result>5__4 = null;
                }
            }
            this.<>s__3 = null;
        }

        protected IEnumerable<ExpressionTree> ResolveTacticFunction(ExpressionTree body)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(body > null, null, "body != null");
            List<ExpressionTree> list = body.TreeToList();
            Dictionary<ExpressionTree, IEnumerable<object>> leafResolvers = new Dictionary<ExpressionTree, IEnumerable<object>> {
                { 
                    body,
                    this.ProcessStmtArgument(body.TreeToExpression())
                }
            };
            return this.GenerateExpressionTree(body, leafResolvers);
        }

        public static IEnumerable<LazyTacny.Solution> ResolveTacticMethod(LazyTacny.Atomic atomic, bool verify = true)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(atomic.DynamicContext.tactic is Tactic, null, "atomic.DynamicContext.tactic is Tactic");
            return new <ResolveTacticMethod>d__13(-2) { 
                <>3__atomic = atomic,
                <>3__verify = verify
            };
        }

        public void SetNewTarget(MemberDecl new_target)
        {
            this.DynamicContext.newTarget = new_target;
        }

        private IEnumerable<LazyTacny.Solution> UpdateLocalVariable(UpdateStmt updateStmt)
        {
            System.Diagnostics.Contracts.__ContractsRuntime.Requires(updateStmt > null, null, "updateStmt != null");
            return new <UpdateLocalVariable>d__22(-2) { 
                <>4__this = this,
                <>3__updateStmt = updateStmt
            };
        }

        [CompilerGenerated]
        private sealed class <CallAction>d__17 : IEnumerable<LazyTacny.Solution>, IEnumerable, IEnumerator<LazyTacny.Solution>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private LazyTacny.Solution <>2__current;
            public object <>3__call;
            public LazyTacny.Solution <>3__solution;
            public LazyTacny.Atomic <>4__this;
            private int <>l__initialThreadId;
            private IEnumerator<LazyTacny.Solution> <>s__1;
            private LazyTacny.Solution <item>5__2;
            private object call;
            private LazyTacny.Solution solution;

            [DebuggerHidden]
            public <CallAction>d__17(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                if (this.<>s__1 != null)
                {
                    this.<>s__1.Dispose();
                }
            }

            private bool MoveNext()
            {
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                            this.<>1__state = -1;
                            this.<>s__1 = this.<>4__this.CallAtomic(this.call, this.solution).GetEnumerator();
                            this.<>1__state = -3;
                            while (this.<>s__1.MoveNext())
                            {
                                this.<item>5__2 = this.<>s__1.Current;
                                this.<>4__this.StaticContext.program.IncTotalBranchCount(this.<>4__this.StaticContext.program.currentDebug);
                                this.<>2__current = this.<item>5__2;
                                this.<>1__state = 1;
                                return true;
                            Label_00BE:
                                this.<>1__state = -3;
                                this.<item>5__2 = null;
                            }
                            this.<>m__Finally1();
                            this.<>s__1 = null;
                            return false;

                        case 1:
                            goto Label_00BE;
                    }
                    return false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
            }

            [DebuggerHidden]
            IEnumerator<LazyTacny.Solution> IEnumerable<LazyTacny.Solution>.GetEnumerator()
            {
                LazyTacny.Atomic.<CallAction>d__17 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<CallAction>d__17(0) {
                        <>4__this = this.<>4__this
                    };
                }
                d__.call = this.<>3__call;
                d__.solution = this.<>3__solution;
                IEnumerator<LazyTacny.Solution> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<LazyTacny.Solution>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                switch (this.<>1__state)
                {
                    case -3:
                    case 1:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            LazyTacny.Solution IEnumerator<LazyTacny.Solution>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <CallAtomic>d__18 : IEnumerable<LazyTacny.Solution>, IEnumerable, IEnumerator<LazyTacny.Solution>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private LazyTacny.Solution <>2__current;
            public object <>3__call;
            public LazyTacny.Solution <>3__solution;
            public LazyTacny.Atomic <>4__this;
            private int <>l__initialThreadId;
            private IEnumerator<LazyTacny.Solution> <>s__11;
            private Dictionary<Statement, Statement>.Enumerator <>s__14;
            private IEnumerator<LazyTacny.Solution> <>s__16;
            private List<Expression>.Enumerator <>s__24;
            private IEnumerator<LazyTacny.Solution> <>s__28;
            private List<Expression>.Enumerator <>s__35;
            private IEnumerator<object> <>s__37;
            private IEnumerator<LazyTacny.Solution> <>s__6;
            private IEnumerator<LazyTacny.Solution> <>s__8;
            private LazyTacny.Atomic <ac>5__23;
            private LazyTacny.Atomic <action>5__13;
            private ApplySuffix <application>5__21;
            private ApplySuffix <aps>5__3;
            private Expression <arg>5__36;
            private Expression <argument>5__25;
            private Microsoft.Dafny.Formal <dafnyFormal>5__20;
            private LazyTacny.Solution <item>5__12;
            private LazyTacny.Solution <item>5__29;
            private LazyTacny.Solution <item>5__9;
            private IVariable <key>5__19;
            private KeyValuePair<Statement, Statement> <kvp>5__15;
            private MemberDecl <member>5__30;
            private NameSegment <name>5__18;
            private ApplySuffix <newAps>5__33;
            private List<Expression> <newArgs>5__32;
            private NameSegment <newNs>5__31;
            private UpdateStmt <newUpdateStmt>5__22;
            private UpdateStmt <newUs>5__34;
            private NameSegment <ns>5__26;
            private IAtomicLazyStmt <qq>5__5;
            private LazyTacny.Solution <res>5__7;
            private LazyTacny.Solution <result>5__17;
            private object <result>5__38;
            private Statement <st>5__2;
            private ITactic <tactic>5__10;
            private IVariable <temp>5__27;
            private System.Type <type>5__1;
            private UpdateStmt <us>5__4;
            private object call;
            private LazyTacny.Solution solution;

            [DebuggerHidden]
            public <CallAtomic>d__18(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                if (this.<>s__6 != null)
                {
                    this.<>s__6.Dispose();
                }
            }

            private void <>m__Finally2()
            {
                this.<>1__state = -1;
                if (this.<>s__8 != null)
                {
                    this.<>s__8.Dispose();
                }
            }

            private void <>m__Finally3()
            {
                this.<>1__state = -1;
                if (this.<>s__11 != null)
                {
                    this.<>s__11.Dispose();
                }
            }

            private void <>m__Finally4()
            {
                this.<>1__state = -1;
                if (this.<>s__16 != null)
                {
                    this.<>s__16.Dispose();
                }
            }

            private void <>m__Finally5()
            {
                this.<>1__state = -1;
                if (this.<>s__28 != null)
                {
                    this.<>s__28.Dispose();
                }
            }

            private bool MoveNext()
            {
                bool flag;
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                        {
                            this.<>1__state = -1;
                            this.<type>5__1 = null;
                            this.<st>5__2 = null;
                            this.<aps>5__3 = null;
                            this.<us>5__4 = null;
                            this.<st>5__2 = this.call as Statement;
                            if (this.<st>5__2 > null)
                            {
                                this.<type>5__1 = LazyTacny.StatementRegister.GetStatementType(this.<st>5__2);
                            }
                            else
                            {
                                this.<aps>5__3 = this.call as ApplySuffix;
                                if (this.<aps>5__3 > null)
                                {
                                    this.<type>5__1 = LazyTacny.StatementRegister.GetStatementType(this.<aps>5__3);
                                    List<AssignmentRhs> rhss = new List<AssignmentRhs> {
                                        new ExprRhs(this.<aps>5__3, null)
                                    };
                                    this.<st>5__2 = new UpdateStmt(this.<aps>5__3.tok, this.<aps>5__3.tok, new List<Expression>(), rhss);
                                }
                            }
                            if (this.<type>5__1 == null)
                            {
                                break;
                            }
                            Debug.WriteLine($"Resolving statement {this.<type>5__1.ToString()}");
                            object[] args = new object[] { this.<>4__this };
                            this.<qq>5__5 = Activator.CreateInstance(this.<type>5__1, args) as IAtomicLazyStmt;
                            if (this.<qq>5__5 > null)
                            {
                                this.<>s__6 = this.<qq>5__5.Resolve(this.<st>5__2, this.solution).GetEnumerator();
                                this.<>1__state = -3;
                                while (this.<>s__6.MoveNext())
                                {
                                    this.<res>5__7 = this.<>s__6.Current;
                                    this.<>2__current = this.<res>5__7;
                                    this.<>1__state = 1;
                                    return true;
                                Label_0204:
                                    this.<>1__state = -3;
                                    this.<res>5__7 = null;
                                }
                                this.<>m__Finally1();
                                this.<>s__6 = null;
                            }
                            else
                            {
                                object[] objArray2 = new object[] { this.<type>5__1.ToString(), typeof(IAtomicLazyStmt) };
                                System.Diagnostics.Contracts.__ContractsRuntime.Assert(false, Util.Error.MkErr(this.<st>5__2, 0x12, objArray2), "false");
                            }
                            this.<qq>5__5 = null;
                            goto Label_0BFC;
                        }
                        case 1:
                            goto Label_0204;

                        case 2:
                            goto Label_0307;

                        case 3:
                            goto Label_0509;

                        case 4:
                            goto Label_05B7;

                        case 5:
                            goto Label_0859;

                        case 6:
                            this.<>1__state = -1;
                            this.<newNs>5__31 = null;
                            this.<newArgs>5__32 = null;
                            this.<newAps>5__33 = null;
                            this.<newUs>5__34 = null;
                            goto Label_0B75;

                        case 7:
                            this.<>1__state = -1;
                            goto Label_0B75;

                        case 8:
                            this.<>1__state = -1;
                            goto Label_0BFC;

                        case 9:
                            this.<>1__state = -1;
                            goto Label_0BFC;

                        default:
                            return false;
                    }
                    Debug.WriteLine("Could not determine statement type");
                    if (this.call is TacticVarDeclStmt)
                    {
                        Debug.WriteLine("Found tactic variable declaration");
                        this.<>s__8 = this.<>4__this.RegisterLocalVariable(this.call as TacticVarDeclStmt).GetEnumerator();
                        this.<>1__state = -4;
                        while (this.<>s__8.MoveNext())
                        {
                            this.<item>5__9 = this.<>s__8.Current;
                            this.<>2__current = this.<item>5__9;
                            this.<>1__state = 2;
                            return true;
                        Label_0307:
                            this.<>1__state = -4;
                            this.<item>5__9 = null;
                        }
                        this.<>m__Finally2();
                        this.<>s__8 = null;
                        goto Label_0BFC;
                    }
                    this.<us>5__4 = this.<st>5__2 as UpdateStmt;
                    if (this.<us>5__4 <= null)
                    {
                        goto Label_0BCC;
                    }
                    if (this.<>4__this.StaticContext.program.IsTacticCall(this.<us>5__4))
                    {
                        Debug.WriteLine("Found nested tactic call");
                        this.<tactic>5__10 = this.<>4__this.StaticContext.program.GetTactic(this.<us>5__4);
                        if (this.<tactic>5__10 is Tactic)
                        {
                            this.<aps>5__3 = ((ExprRhs) this.<us>5__4.Rhss[0]).Expr as ApplySuffix;
                            this.<>s__11 = this.<>4__this.ResolveNestedTacticCall(this.<tactic>5__10, this.<aps>5__3).GetEnumerator();
                            this.<>1__state = -5;
                            while (this.<>s__11.MoveNext())
                            {
                                this.<item>5__12 = this.<>s__11.Current;
                                this.<action>5__13 = this.<>4__this.Copy();
                                this.<action>5__13.SetNewTarget(this.solution.state.GetNewTarget());
                                this.<>s__14 = this.<item>5__12.state.GetResult().GetEnumerator();
                                try
                                {
                                    while (this.<>s__14.MoveNext())
                                    {
                                        this.<kvp>5__15 = this.<>s__14.Current;
                                        this.<action>5__13.AddUpdated(this.<kvp>5__15.Key, this.<kvp>5__15.Value);
                                        this.<kvp>5__15 = new KeyValuePair<Statement, Statement>();
                                    }
                                }
                                finally
                                {
                                    this.<>s__14.Dispose();
                                }
                                this.<>s__14 = new Dictionary<Statement, Statement>.Enumerator();
                                this.<>2__current = new LazyTacny.Solution(this.<action>5__13, null);
                                this.<>1__state = 3;
                                return true;
                            Label_0509:
                                this.<>1__state = -5;
                                this.<action>5__13 = null;
                                this.<item>5__12 = null;
                            }
                            this.<>m__Finally3();
                            this.<>s__11 = null;
                        }
                        this.<tactic>5__10 = null;
                        goto Label_0BFC;
                    }
                    if (LazyTacny.Atomic.IsLocalAssignment(this.<us>5__4))
                    {
                        this.<>s__16 = this.<>4__this.UpdateLocalVariable(this.<us>5__4).GetEnumerator();
                        this.<>1__state = -6;
                        while (this.<>s__16.MoveNext())
                        {
                            this.<result>5__17 = this.<>s__16.Current;
                            this.<>2__current = this.<result>5__17;
                            this.<>1__state = 4;
                            return true;
                        Label_05B7:
                            this.<>1__state = -6;
                            this.<result>5__17 = null;
                        }
                        this.<>m__Finally4();
                        this.<>s__16 = null;
                        goto Label_0BFC;
                    }
                    if (!this.<>4__this.IsArgumentApplication(this.<us>5__4))
                    {
                        goto Label_0B98;
                    }
                    this.<name>5__18 = LazyTacny.Atomic.GetNameSegment(this.<us>5__4);
                    this.<key>5__19 = this.<>4__this.GetLocalKeyByName(this.<name>5__18);
                    this.<dafnyFormal>5__20 = this.<key>5__19 as Microsoft.Dafny.Formal;
                    if (this.<dafnyFormal>5__20 > null)
                    {
                        if (this.<dafnyFormal>5__20.Type.ToString() == "Tactic")
                        {
                            this.<application>5__21 = this.<>4__this.GetLocalValueByName(this.<name>5__18) as ApplySuffix;
                            List<AssignmentRhs> list2 = new List<AssignmentRhs> {
                                new ExprRhs(this.<application>5__21, null)
                            };
                            this.<newUpdateStmt>5__22 = new UpdateStmt(this.<us>5__4.Tok, this.<us>5__4.EndTok, this.<us>5__4.Lhss, list2);
                            this.<ac>5__23 = this.<>4__this.Copy();
                            this.<>s__24 = this.<application>5__21.Args.GetEnumerator();
                            try
                            {
                                while (this.<>s__24.MoveNext())
                                {
                                    this.<argument>5__25 = this.<>s__24.Current;
                                    this.<ns>5__26 = this.<argument>5__25 as NameSegment;
                                    if (this.<>4__this.StaticContext.HasGlobalVariable(this.<ns>5__26.Name))
                                    {
                                        this.<temp>5__27 = this.<>4__this.StaticContext.GetGlobalVariable(this.<ns>5__26.Name);
                                        this.<ac>5__23.DynamicContext.AddLocal(new Microsoft.Dafny.Formal(this.<ns>5__26.tok, this.<ns>5__26.Name, this.<temp>5__27.Type, true, this.<temp>5__27.IsGhost), this.<ns>5__26);
                                        this.<temp>5__27 = null;
                                    }
                                    this.<ns>5__26 = null;
                                    this.<argument>5__25 = null;
                                }
                            }
                            finally
                            {
                                this.<>s__24.Dispose();
                            }
                            this.<>s__24 = new List<Expression>.Enumerator();
                            this.<>s__28 = this.<ac>5__23.CallAction(this.<newUpdateStmt>5__22, this.solution).GetEnumerator();
                            this.<>1__state = -7;
                            while (this.<>s__28.MoveNext())
                            {
                                this.<item>5__29 = this.<>s__28.Current;
                                this.<>2__current = this.<item>5__29;
                                this.<>1__state = 5;
                                return true;
                            Label_0859:
                                this.<>1__state = -7;
                                this.<item>5__29 = null;
                            }
                            this.<>m__Finally5();
                            this.<>s__28 = null;
                            this.<application>5__21 = null;
                            this.<newUpdateStmt>5__22 = null;
                            this.<ac>5__23 = null;
                        }
                        goto Label_0B7D;
                    }
                    this.<member>5__30 = this.<>4__this.GetLocalValueByName(this.<name>5__18) as MemberDecl;
                    if (this.<member>5__30 > null)
                    {
                        this.<aps>5__3 = ((ExprRhs) this.<us>5__4.Rhss[0]).Expr as ApplySuffix;
                        this.<newNs>5__31 = new NameSegment(this.<aps>5__3.tok, this.<member>5__30.Name, null);
                        this.<newArgs>5__32 = new List<Expression>();
                        this.<>s__35 = this.<aps>5__3.Args.GetEnumerator();
                        try
                        {
                            while (this.<>s__35.MoveNext())
                            {
                                this.<arg>5__36 = this.<>s__35.Current;
                                this.<>s__37 = this.<>4__this.ProcessStmtArgument(this.<arg>5__36).GetEnumerator();
                                try
                                {
                                    while (this.<>s__37.MoveNext())
                                    {
                                        this.<result>5__38 = this.<>s__37.Current;
                                        if (this.<result>5__38 is Expression)
                                        {
                                            this.<newArgs>5__32.Add(this.<result>5__38 as Expression);
                                        }
                                        else if (this.<result>5__38 is IVariable)
                                        {
                                            this.<newArgs>5__32.Add(LazyTacny.Atomic.IVariableToExpression(this.<result>5__38 as IVariable));
                                        }
                                        else
                                        {
                                            System.Diagnostics.Contracts.__ContractsRuntime.Assert(false, "Sum tin wong", "false");
                                        }
                                        goto Label_0A33;
                                    }
                                }
                                finally
                                {
                                    if (this.<>s__37 != null)
                                    {
                                        this.<>s__37.Dispose();
                                    }
                                }
                            Label_0A33:
                                this.<>s__37 = null;
                                this.<arg>5__36 = null;
                            }
                        }
                        finally
                        {
                            this.<>s__35.Dispose();
                        }
                        this.<>s__35 = new List<Expression>.Enumerator();
                        this.<newAps>5__33 = new ApplySuffix(this.<aps>5__3.tok, this.<newNs>5__31, this.<newArgs>5__32);
                        Util.Printer.P.GetConsolePrinter().PrintExpression(this.<newAps>5__33, false);
                        List<AssignmentRhs> list3 = new List<AssignmentRhs> {
                            new ExprRhs(this.<newAps>5__33, null)
                        };
                        this.<newUs>5__34 = new UpdateStmt(this.<us>5__4.Tok, this.<us>5__4.EndTok, this.<us>5__4.Lhss, list3);
                        this.<>2__current = this.<>4__this.AddNewStatement<UpdateStmt>(this.<us>5__4, this.<newUs>5__34);
                        this.<>1__state = 6;
                        return true;
                    }
                    this.<>2__current = this.<>4__this.CallDefaultAction(this.<us>5__4);
                    this.<>1__state = 7;
                    return true;
                Label_0B75:
                    this.<member>5__30 = null;
                Label_0B7D:
                    this.<name>5__18 = null;
                    this.<key>5__19 = null;
                    this.<dafnyFormal>5__20 = null;
                    goto Label_0BFC;
                Label_0B98:
                    this.<>2__current = this.<>4__this.CallDefaultAction(this.<st>5__2);
                    this.<>1__state = 8;
                    return true;
                Label_0BCC:
                    this.<>2__current = this.<>4__this.CallDefaultAction(this.<st>5__2);
                    this.<>1__state = 9;
                    return true;
                Label_0BFC:
                    flag = false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
                return flag;
            }

            [DebuggerHidden]
            IEnumerator<LazyTacny.Solution> IEnumerable<LazyTacny.Solution>.GetEnumerator()
            {
                LazyTacny.Atomic.<CallAtomic>d__18 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<CallAtomic>d__18(0) {
                        <>4__this = this.<>4__this
                    };
                }
                d__.call = this.<>3__call;
                d__.solution = this.<>3__solution;
                IEnumerator<LazyTacny.Solution> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<LazyTacny.Solution>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                switch (this.<>1__state)
                {
                    case -7:
                    case 5:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally5();
                        }
                        break;

                    case -6:
                    case 4:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally4();
                        }
                        break;

                    case -5:
                    case 3:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally3();
                        }
                        break;

                    case -4:
                    case 2:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally2();
                        }
                        break;

                    case -3:
                    case 1:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            LazyTacny.Solution IEnumerator<LazyTacny.Solution>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <GenerateExpressionTree>d__54 : IEnumerable<ExpressionTree>, IEnumerable, IEnumerator<ExpressionTree>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private ExpressionTree <>2__current;
            public Dictionary<ExpressionTree, IEnumerable<object>> <>3__leafResolvers;
            public ExpressionTree <>3__tree;
            public LazyTacny.Atomic <>4__this;
            private int <>l__initialThreadId;
            private IEnumerator<object> <>s__2;
            private IEnumerator<ExpressionTree> <>s__7;
            private KeyValuePair<ExpressionTree, IEnumerable<object>> <kvp>5__1;
            private ExpressionTree <newLeaf>5__5;
            private ExpressionTree <newTree>5__6;
            private Expression <newValue>5__4;
            private ExpressionTree <result>5__8;
            private object <value>5__3;
            private Dictionary<ExpressionTree, IEnumerable<object>> leafResolvers;
            private ExpressionTree tree;

            [DebuggerHidden]
            public <GenerateExpressionTree>d__54(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                if (this.<>s__2 != null)
                {
                    this.<>s__2.Dispose();
                }
            }

            private void <>m__Finally2()
            {
                this.<>1__state = -3;
                if (this.<>s__7 != null)
                {
                    this.<>s__7.Dispose();
                }
            }

            private bool MoveNext()
            {
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                            this.<>1__state = -1;
                            this.<kvp>5__1 = this.leafResolvers.FirstOrDefault<KeyValuePair<ExpressionTree, IEnumerable<object>>>();
                            if (!this.<kvp>5__1.Equals(new KeyValuePair<ExpressionTree, IEnumerable<object>>()))
                            {
                                break;
                            }
                            this.<>2__current = this.tree;
                            this.<>1__state = 1;
                            return true;

                        case 1:
                            this.<>1__state = -1;
                            return false;

                        case 2:
                            goto Label_01EE;

                        default:
                            return false;
                    }
                    this.leafResolvers.Remove(this.<kvp>5__1.Key);
                    this.<>s__2 = this.<kvp>5__1.Value.GetEnumerator();
                    this.<>1__state = -3;
                    while (this.<>s__2.MoveNext())
                    {
                        this.<value>5__3 = this.<>s__2.Current;
                        this.<newValue>5__4 = null;
                        if (this.<value>5__3 is Expression)
                        {
                            this.<newValue>5__4 = this.<value>5__3 as Expression;
                        }
                        else if (this.<value>5__3 is IVariable)
                        {
                            this.<newValue>5__4 = LazyTacny.Atomic.IVariableToExpression(this.<value>5__3 as IVariable);
                        }
                        else
                        {
                            System.Diagnostics.Contracts.__ContractsRuntime.Assert(false, "Sum tin wong", "false");
                        }
                        this.<newLeaf>5__5 = ExpressionTree.ExpressionToTree(this.<newValue>5__4);
                        this.<newTree>5__6 = ExpressionTree.FindAndReplaceNode(this.tree, this.<newLeaf>5__5, this.<kvp>5__1.Key);
                        this.<>s__7 = this.<>4__this.GenerateExpressionTree(this.<newTree>5__6, this.leafResolvers).GetEnumerator();
                        this.<>1__state = -4;
                        while (this.<>s__7.MoveNext())
                        {
                            this.<result>5__8 = this.<>s__7.Current;
                            this.<>2__current = this.<result>5__8;
                            this.<>1__state = 2;
                            return true;
                        Label_01EE:
                            this.<>1__state = -4;
                            this.<result>5__8 = null;
                        }
                        this.<>m__Finally2();
                        this.<>s__7 = null;
                        this.<newValue>5__4 = null;
                        this.<newLeaf>5__5 = null;
                        this.<newTree>5__6 = null;
                        this.<value>5__3 = null;
                    }
                    this.<>m__Finally1();
                    this.<>s__2 = null;
                    return false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
            }

            [DebuggerHidden]
            IEnumerator<ExpressionTree> IEnumerable<ExpressionTree>.GetEnumerator()
            {
                LazyTacny.Atomic.<GenerateExpressionTree>d__54 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<GenerateExpressionTree>d__54(0) {
                        <>4__this = this.<>4__this
                    };
                }
                d__.tree = this.<>3__tree;
                d__.leafResolvers = this.<>3__leafResolvers;
                IEnumerator<ExpressionTree> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<Tacny.ExpressionTree>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                int num = this.<>1__state;
                switch (num)
                {
                    case -4:
                    case -3:
                    case 2:
                        try
                        {
                            switch (num)
                            {
                                case -4:
                                case 2:
                                    try
                                    {
                                    }
                                    finally
                                    {
                                        this.<>m__Finally2();
                                    }
                                    break;
                            }
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            ExpressionTree IEnumerator<ExpressionTree>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <ProcessStmtArgument>d__19 : IEnumerable<object>, IEnumerable, IEnumerator<object>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private object <>2__current;
            public Expression <>3__argument;
            public LazyTacny.Atomic <>4__this;
            private int <>l__initialThreadId;
            private IEnumerator<LazyTacny.Solution> <>s__13;
            private IEnumerator<object> <>s__16;
            private IEnumerator<LazyTacny.Solution> <>s__19;
            private IEnumerator<ExpressionTree> <>s__22;
            private IEnumerator<LazyTacny.Solution> <>s__7;
            private ApplySuffix <aps>5__2;
            private ExprDotName <edn>5__24;
            private ExpressionTree <expt>5__21;
            private LazyTacny.Solution <item>5__14;
            private LazyTacny.Solution <item>5__8;
            private Microsoft.Dafny.LocalVariable <lv>5__11;
            private Microsoft.Dafny.LocalVariable <lv>5__5;
            private ApplySuffix <newAps>5__18;
            private object <newLhs>5__25;
            private NameSegment <ns>5__1;
            private object <res>5__15;
            private object <res>5__9;
            private LazyTacny.Solution <result>5__20;
            private ExpressionTree <result>5__23;
            private object <solution>5__17;
            private TacticVarDeclStmt <tvds>5__12;
            private TacticVarDeclStmt <tvds>5__6;
            private LazyTacny.StatementRegister.Atomic <type>5__3;
            private UpdateStmt <us>5__10;
            private UpdateStmt <us>5__4;
            private Expression argument;

            [DebuggerHidden]
            public <ProcessStmtArgument>d__19(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                if (this.<>s__7 != null)
                {
                    this.<>s__7.Dispose();
                }
            }

            private void <>m__Finally2()
            {
                this.<>1__state = -1;
                if (this.<>s__13 != null)
                {
                    this.<>s__13.Dispose();
                }
            }

            private void <>m__Finally3()
            {
                this.<>1__state = -1;
                if (this.<>s__16 != null)
                {
                    this.<>s__16.Dispose();
                }
            }

            private void <>m__Finally4()
            {
                this.<>1__state = -1;
                if (this.<>s__19 != null)
                {
                    this.<>s__19.Dispose();
                }
            }

            private void <>m__Finally5()
            {
                this.<>1__state = -1;
                if (this.<>s__22 != null)
                {
                    this.<>s__22.Dispose();
                }
            }

            private bool MoveNext()
            {
                bool flag;
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                        {
                            this.<>1__state = -1;
                            this.<ns>5__1 = null;
                            this.<aps>5__2 = null;
                            this.<ns>5__1 = this.argument as NameSegment;
                            if (this.<ns>5__1 <= null)
                            {
                                goto Label_013D;
                            }
                            if (!this.<>4__this.HasLocalWithName(this.<ns>5__1))
                            {
                                break;
                            }
                            object localValueByName = this.<>4__this.GetLocalValueByName(this.<ns>5__1.Name);
                            if (localValueByName == null)
                            {
                            }
                            this.<>2__current = this.<ns>5__1;
                            this.<>1__state = 1;
                            return true;
                        }
                        case 1:
                            this.<>1__state = -1;
                            goto Label_08C3;

                        case 2:
                            this.<>1__state = -1;
                            goto Label_08C3;

                        case 3:
                            goto Label_02CA;

                        case 4:
                            goto Label_0485;

                        case 5:
                            goto Label_056D;

                        case 6:
                            this.<>1__state = -1;
                            goto Label_08C3;

                        case 7:
                            goto Label_067D;

                        case 8:
                            goto Label_074F;

                        case 9:
                            this.<>1__state = -1;
                            this.<newLhs>5__25 = null;
                            goto Label_0892;

                        case 10:
                            this.<>1__state = -1;
                            goto Label_0892;

                        case 11:
                            this.<>1__state = -1;
                            goto Label_08C3;

                        default:
                            return false;
                    }
                    this.<>2__current = this.<ns>5__1;
                    this.<>1__state = 2;
                    return true;
                Label_013D:
                    if ((this.<aps>5__2 = this.argument as ApplySuffix) > null)
                    {
                        this.<type>5__3 = LazyTacny.StatementRegister.GetAtomicType(this.<aps>5__2);
                        if (this.<type>5__3 <= LazyTacny.StatementRegister.Atomic.UNDEFINED)
                        {
                            if (!this.<>4__this.StaticContext.program.IsTacticCall(this.<aps>5__2))
                            {
                                if (!(this.<aps>5__2.Lhs is ExprDotName))
                                {
                                    this.<>2__current = this.argument;
                                    this.<>1__state = 6;
                                    return true;
                                }
                                this.<>s__16 = this.<>4__this.ProcessStmtArgument(this.<aps>5__2.Lhs).GetEnumerator();
                                this.<>1__state = -5;
                                while (this.<>s__16.MoveNext())
                                {
                                    this.<solution>5__17 = this.<>s__16.Current;
                                    this.<>2__current = new ApplySuffix(this.<aps>5__2.tok, this.<solution>5__17 as Expression, this.<aps>5__2.Args);
                                    this.<>1__state = 5;
                                    return true;
                                Label_056D:
                                    this.<>1__state = -5;
                                    this.<solution>5__17 = null;
                                }
                                this.<>m__Finally3();
                                this.<>s__16 = null;
                            }
                            else
                            {
                                List<AssignmentRhs> rhss = new List<AssignmentRhs> {
                                    new ExprRhs(this.<aps>5__2, null)
                                };
                                this.<us>5__10 = new UpdateStmt(this.<aps>5__2.tok, this.<aps>5__2.tok, new List<Expression>(), rhss);
                                this.<lv>5__11 = this.<>4__this.GenerateFreshLocalVariable(this.<aps>5__2.Lhs as NameSegment);
                                List<Microsoft.Dafny.LocalVariable> locals = new List<Microsoft.Dafny.LocalVariable> {
                                    this.<lv>5__11
                                };
                                this.<tvds>5__12 = new TacticVarDeclStmt(this.<us>5__10.Tok, this.<us>5__10.EndTok, locals, this.<us>5__10);
                                this.<>s__13 = this.<>4__this.CallAction(this.<tvds>5__12, new LazyTacny.Solution(this.<>4__this.Copy(), null)).GetEnumerator();
                                this.<>1__state = -4;
                                while (this.<>s__13.MoveNext())
                                {
                                    this.<item>5__14 = this.<>s__13.Current;
                                    this.<res>5__15 = this.<item>5__14.state.DynamicContext.localDeclarations[this.<lv>5__11];
                                    this.<item>5__14.state.DynamicContext.localDeclarations.Remove(this.<lv>5__11);
                                    this.<>2__current = this.<res>5__15;
                                    this.<>1__state = 4;
                                    return true;
                                Label_0485:
                                    this.<>1__state = -4;
                                    this.<res>5__15 = null;
                                    this.<item>5__14 = null;
                                }
                                this.<>m__Finally2();
                                this.<>s__13 = null;
                                this.<us>5__10 = null;
                                this.<lv>5__11 = null;
                                this.<tvds>5__12 = null;
                            }
                        }
                        else
                        {
                            List<AssignmentRhs> list1 = new List<AssignmentRhs> {
                                new ExprRhs(this.<aps>5__2, null)
                            };
                            this.<us>5__4 = new UpdateStmt(this.<aps>5__2.tok, this.<aps>5__2.tok, new List<Expression>(), list1);
                            this.<lv>5__5 = this.<>4__this.GenerateFreshLocalVariable(this.<aps>5__2.Lhs as NameSegment);
                            List<Microsoft.Dafny.LocalVariable> list2 = new List<Microsoft.Dafny.LocalVariable> {
                                this.<lv>5__5
                            };
                            this.<tvds>5__6 = new TacticVarDeclStmt(this.<us>5__4.Tok, this.<us>5__4.EndTok, list2, this.<us>5__4);
                            this.<>s__7 = this.<>4__this.CallAction(this.<tvds>5__6, new LazyTacny.Solution(this.<>4__this.Copy(), null)).GetEnumerator();
                            this.<>1__state = -3;
                            while (this.<>s__7.MoveNext())
                            {
                                this.<item>5__8 = this.<>s__7.Current;
                                this.<res>5__9 = this.<item>5__8.state.DynamicContext.localDeclarations[this.<lv>5__5];
                                this.<item>5__8.state.DynamicContext.localDeclarations.Remove(this.<lv>5__5);
                                this.<>2__current = this.<res>5__9;
                                this.<>1__state = 3;
                                return true;
                            Label_02CA:
                                this.<>1__state = -3;
                                this.<res>5__9 = null;
                                this.<item>5__8 = null;
                            }
                            this.<>m__Finally1();
                            this.<>s__7 = null;
                            this.<us>5__4 = null;
                            this.<lv>5__5 = null;
                            this.<tvds>5__6 = null;
                        }
                        goto Label_08C3;
                    }
                    if (this.argument is TacnyBinaryExpr)
                    {
                        this.<newAps>5__18 = new ApplySuffix(LazyTacny.Atomic.CreateToken("TacnyBinaryExpr", 0, 0), this.argument, new List<Expression>());
                        this.<>s__19 = this.<>4__this.CallAction(this.<newAps>5__18, new LazyTacny.Solution(this.<>4__this.Copy(), null)).GetEnumerator();
                        this.<>1__state = -6;
                        while (this.<>s__19.MoveNext())
                        {
                            this.<result>5__20 = this.<>s__19.Current;
                            this.<>2__current = this.<result>5__20.state.DynamicContext.generatedExpressions[0];
                            this.<>1__state = 7;
                            return true;
                        Label_067D:
                            this.<>1__state = -6;
                            this.<result>5__20 = null;
                        }
                        this.<>m__Finally4();
                        this.<>s__19 = null;
                        this.<newAps>5__18 = null;
                        goto Label_08C3;
                    }
                    if ((this.argument is BinaryExpr) || (this.argument is ParensExpression))
                    {
                        this.<expt>5__21 = ExpressionTree.ExpressionToTree(this.argument);
                        this.<>s__22 = this.<>4__this.ResolveExpression(this.<expt>5__21).GetEnumerator();
                        this.<>1__state = -7;
                        while (this.<>s__22.MoveNext())
                        {
                            this.<result>5__23 = this.<>s__22.Current;
                            this.<>2__current = this.<expt>5__21.TreeToExpression();
                            this.<>1__state = 8;
                            return true;
                        Label_074F:
                            this.<>1__state = -7;
                            this.<result>5__23 = null;
                        }
                        this.<>m__Finally5();
                        this.<>s__22 = null;
                        this.<expt>5__21 = null;
                        goto Label_08C3;
                    }
                    if (!(this.argument is ExprDotName))
                    {
                        goto Label_089F;
                    }
                    this.<edn>5__24 = this.argument as ExprDotName;
                    if (this.<>4__this.HasLocalWithName(this.<edn>5__24.Lhs as NameSegment))
                    {
                        this.<ns>5__1 = this.<edn>5__24.Lhs as NameSegment;
                        object obj2 = this.<>4__this.GetLocalValueByName(this.<ns>5__1.Name);
                        if (obj2 == null)
                        {
                        }
                        this.<newLhs>5__25 = this.<ns>5__1;
                        this.<>2__current = new ExprDotName(this.<edn>5__24.tok, this.<newLhs>5__25 as Expression, this.<edn>5__24.SuffixName, this.<edn>5__24.OptTypeArguments);
                        this.<>1__state = 9;
                        return true;
                    }
                    this.<>2__current = this.<edn>5__24;
                    this.<>1__state = 10;
                    return true;
                Label_0892:
                    this.<edn>5__24 = null;
                    goto Label_08C3;
                Label_089F:
                    this.<>2__current = this.argument;
                    this.<>1__state = 11;
                    return true;
                Label_08C3:
                    flag = false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
                return flag;
            }

            [DebuggerHidden]
            IEnumerator<object> IEnumerable<object>.GetEnumerator()
            {
                LazyTacny.Atomic.<ProcessStmtArgument>d__19 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<ProcessStmtArgument>d__19(0) {
                        <>4__this = this.<>4__this
                    };
                }
                d__.argument = this.<>3__argument;
                IEnumerator<object> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                switch (this.<>1__state)
                {
                    case -7:
                    case 8:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally5();
                        }
                        break;

                    case -6:
                    case 7:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally4();
                        }
                        break;

                    case -5:
                    case 5:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally3();
                        }
                        break;

                    case -4:
                    case 4:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally2();
                        }
                        break;

                    case -3:
                    case 3:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            object IEnumerator<object>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <RegisterLocalVariable>d__20 : IEnumerable<LazyTacny.Solution>, IEnumerable, IEnumerator<LazyTacny.Solution>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private LazyTacny.Solution <>2__current;
            public TacticVarDeclStmt <>3__declaration;
            public LazyTacny.Atomic <>4__this;
            private int <>l__initialThreadId;
            private IEnumerator<object> <>s__13;
            private List<Microsoft.Dafny.LocalVariable>.Enumerator <>s__15;
            private List<AssignmentRhs>.Enumerator <>s__2;
            private IEnumerator<LazyTacny.Solution> <>s__9;
            private ApplySuffix <aps>5__7;
            private ExprRhs <exprRhs>5__5;
            private int <index>5__4;
            private Microsoft.Dafny.LocalVariable <item>5__16;
            private AssignmentRhs <item>5__3;
            private Microsoft.Dafny.LiteralExpr <litExpr>5__6;
            private LazyTacny.Solution <result>5__10;
            private object <result>5__14;
            private List<Expression> <resultExpressions>5__11;
            private List<Statement> <resultStatements>5__12;
            private UpdateStmt <rhs>5__1;
            private ITactic <tactic>5__8;
            private TacticVarDeclStmt declaration;

            [DebuggerHidden]
            public <RegisterLocalVariable>d__20(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                this.<>s__2.Dispose();
            }

            private void <>m__Finally2()
            {
                this.<>1__state = -3;
                if (this.<>s__9 != null)
                {
                    this.<>s__9.Dispose();
                }
            }

            private void <>m__Finally3()
            {
                this.<>1__state = -3;
                if (this.<>s__13 != null)
                {
                    this.<>s__13.Dispose();
                }
            }

            private bool MoveNext()
            {
                bool flag;
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                            this.<>1__state = -1;
                            if (this.declaration.Update <= null)
                            {
                                break;
                            }
                            this.<rhs>5__1 = this.declaration.Update as UpdateStmt;
                            if (this.<rhs>5__1 != null)
                            {
                                this.<>s__2 = this.<rhs>5__1.Rhss.GetEnumerator();
                                this.<>1__state = -3;
                                while (this.<>s__2.MoveNext())
                                {
                                    this.<item>5__3 = this.<>s__2.Current;
                                    this.<index>5__4 = this.<rhs>5__1.Rhss.IndexOf(this.<item>5__3);
                                    System.Diagnostics.Contracts.__ContractsRuntime.Assert(this.declaration.Locals.ElementAtOrDefault<Microsoft.Dafny.LocalVariable>(this.<index>5__4) > null, Util.Error.MkErr(this.declaration, 8, new object[0]), "declaration.Locals.ElementAtOrDefault(index) != null");
                                    this.<exprRhs>5__5 = this.<item>5__3 as ExprRhs;
                                    this.<litExpr>5__6 = this.<exprRhs>5__5.Expr as Microsoft.Dafny.LiteralExpr;
                                    if (this.<litExpr>5__6 <= null)
                                    {
                                        goto Label_01C9;
                                    }
                                    this.<>4__this.AddLocal(this.declaration.Locals[this.<index>5__4], this.<litExpr>5__6);
                                    this.<>2__current = new LazyTacny.Solution(this.<>4__this.Copy(), null);
                                    this.<>1__state = 1;
                                    return true;
                                Label_01BB:
                                    this.<>1__state = -3;
                                    goto Label_0524;
                                Label_01C9:
                                    this.<aps>5__7 = this.<exprRhs>5__5.Expr as ApplySuffix;
                                    if (this.<>4__this.StaticContext.program.IsTacticCall(this.<aps>5__7))
                                    {
                                        this.<tactic>5__8 = this.<>4__this.StaticContext.program.GetTactic(this.<aps>5__7);
                                        this.<>s__9 = this.<>4__this.ResolveNestedTacticCall(this.<tactic>5__8, this.<aps>5__7).GetEnumerator();
                                        this.<>1__state = -4;
                                        while (this.<>s__9.MoveNext())
                                        {
                                            this.<result>5__10 = this.<>s__9.Current;
                                            if (!(this.<tactic>5__8 is TacticFunction))
                                            {
                                                goto Label_034D;
                                            }
                                            this.<resultExpressions>5__11 = this.<result>5__10.state.DynamicContext.generatedExpressions;
                                            if (this.<resultExpressions>5__11.Count != 0)
                                            {
                                                goto Label_02F5;
                                            }
                                            this.<>2__current = this.<>4__this.AddNewLocal<object>(this.declaration.Locals[this.<index>5__4], null);
                                            this.<>1__state = 2;
                                            return true;
                                        Label_02E8:
                                            this.<>1__state = -4;
                                            goto Label_0340;
                                        Label_02F5:
                                            this.<>2__current = this.<>4__this.AddNewLocal<Expression>(this.declaration.Locals[this.<index>5__4], this.<resultExpressions>5__11[0]);
                                            this.<>1__state = 3;
                                            return true;
                                        Label_0337:
                                            this.<>1__state = -4;
                                        Label_0340:
                                            this.<resultExpressions>5__11 = null;
                                            goto Label_0440;
                                        Label_034D:
                                            this.<resultStatements>5__12 = this.<result>5__10.state.GetAllUpdated();
                                            if (this.<resultStatements>5__12.Count != 0)
                                            {
                                                goto Label_03C0;
                                            }
                                            this.<>2__current = this.<>4__this.AddNewLocal<object>(this.declaration.Locals[this.<index>5__4], null);
                                            this.<>1__state = 4;
                                            return true;
                                        Label_03B2:
                                            this.<>1__state = -4;
                                            goto Label_0438;
                                        Label_03C0:
                                            Util.Printer.P.GetConsolePrinter().PrintStatement(this.<resultStatements>5__12[0], 0);
                                            Console.Out.WriteLine("");
                                            this.<>2__current = this.<>4__this.AddNewLocal<Statement>(this.declaration.Locals[this.<index>5__4], this.<resultStatements>5__12[0]);
                                            this.<>1__state = 5;
                                            return true;
                                        Label_042F:
                                            this.<>1__state = -4;
                                        Label_0438:
                                            this.<resultStatements>5__12 = null;
                                        Label_0440:
                                            this.<result>5__10 = null;
                                        }
                                        this.<>m__Finally2();
                                        this.<>s__9 = null;
                                        this.<tactic>5__8 = null;
                                    }
                                    else
                                    {
                                        this.<>s__13 = this.<>4__this.ProcessStmtArgument(this.<exprRhs>5__5.Expr).GetEnumerator();
                                        this.<>1__state = -5;
                                        while (this.<>s__13.MoveNext())
                                        {
                                            this.<result>5__14 = this.<>s__13.Current;
                                            this.<>2__current = this.<>4__this.AddNewLocal<object>(this.declaration.Locals[this.<index>5__4], this.<result>5__14);
                                            this.<>1__state = 6;
                                            return true;
                                        Label_04F0:
                                            this.<>1__state = -5;
                                            this.<result>5__14 = null;
                                        }
                                        this.<>m__Finally3();
                                        this.<>s__13 = null;
                                    }
                                    this.<aps>5__7 = null;
                                Label_0524:
                                    this.<exprRhs>5__5 = null;
                                    this.<litExpr>5__6 = null;
                                    this.<item>5__3 = null;
                                }
                                this.<>m__Finally1();
                                this.<>s__2 = new List<AssignmentRhs>.Enumerator();
                            }
                            this.<rhs>5__1 = null;
                            goto Label_0611;

                        case 1:
                            goto Label_01BB;

                        case 2:
                            goto Label_02E8;

                        case 3:
                            goto Label_0337;

                        case 4:
                            goto Label_03B2;

                        case 5:
                            goto Label_042F;

                        case 6:
                            goto Label_04F0;

                        case 7:
                            this.<>1__state = -1;
                            goto Label_0611;

                        default:
                            return false;
                    }
                    this.<>s__15 = this.declaration.Locals.GetEnumerator();
                    try
                    {
                        while (this.<>s__15.MoveNext())
                        {
                            this.<item>5__16 = this.<>s__15.Current;
                            this.<>4__this.AddLocal(this.<item>5__16, null);
                            this.<item>5__16 = null;
                        }
                    }
                    finally
                    {
                        this.<>s__15.Dispose();
                    }
                    this.<>s__15 = new List<Microsoft.Dafny.LocalVariable>.Enumerator();
                    this.<>2__current = new LazyTacny.Solution(this.<>4__this.Copy(), null);
                    this.<>1__state = 7;
                    return true;
                Label_0611:
                    flag = false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
                return flag;
            }

            [DebuggerHidden]
            IEnumerator<LazyTacny.Solution> IEnumerable<LazyTacny.Solution>.GetEnumerator()
            {
                LazyTacny.Atomic.<RegisterLocalVariable>d__20 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<RegisterLocalVariable>d__20(0) {
                        <>4__this = this.<>4__this
                    };
                }
                d__.declaration = this.<>3__declaration;
                IEnumerator<LazyTacny.Solution> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<LazyTacny.Solution>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                int num = this.<>1__state;
                switch (num)
                {
                    case -5:
                    case -4:
                    case -3:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        try
                        {
                            switch (num)
                            {
                                case -5:
                                case 6:
                                    break;

                                case -4:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    try
                                    {
                                    }
                                    finally
                                    {
                                        this.<>m__Finally2();
                                    }
                                    return;

                                default:
                                    break;
                            }
                            try
                            {
                            }
                            finally
                            {
                                this.<>m__Finally3();
                            }
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            LazyTacny.Solution IEnumerator<LazyTacny.Solution>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <ResolveBody>d__15 : IEnumerable<LazyTacny.Solution>, IEnumerable, IEnumerator<LazyTacny.Solution>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private LazyTacny.Solution <>2__current;
            public BlockStmt <>3__body;
            public LazyTacny.Atomic <>4__this;
            private int <>l__initialThreadId;
            private IEnumerator<LazyTacny.Solution> <>s__3;
            private LazyTacny.Atomic <ac>5__2;
            private LazyTacny.Solution <item>5__4;
            private ISearch <strat>5__1;
            private BlockStmt body;

            [DebuggerHidden]
            public <ResolveBody>d__15(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                if (this.<>s__3 != null)
                {
                    this.<>s__3.Dispose();
                }
            }

            private bool MoveNext()
            {
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                            this.<>1__state = -1;
                            Debug.WriteLine("Resolving statement body");
                            this.<strat>5__1 = new SearchStrategy(this.<>4__this.SearchStrat);
                            this.<ac>5__2 = this.<>4__this.Copy();
                            this.<ac>5__2.DynamicContext.tacticBody = this.body.Body;
                            this.<ac>5__2.DynamicContext.ResetCounter();
                            this.<>s__3 = this.<strat>5__1.Search(this.<ac>5__2, false).GetEnumerator();
                            this.<>1__state = -3;
                            while (this.<>s__3.MoveNext())
                            {
                                this.<item>5__4 = this.<>s__3.Current;
                                this.<item>5__4.state.DynamicContext.tacticBody = this.<>4__this.DynamicContext.tacticBody;
                                this.<item>5__4.state.DynamicContext.tac_call = this.<>4__this.DynamicContext.tac_call;
                                this.<item>5__4.state.DynamicContext.SetCounter(this.<>4__this.DynamicContext.GetCounter());
                                this.<>2__current = this.<item>5__4;
                                this.<>1__state = 1;
                                return true;
                            Label_015B:
                                this.<>1__state = -3;
                                this.<item>5__4 = null;
                            }
                            this.<>m__Finally1();
                            this.<>s__3 = null;
                            Debug.WriteLine("Body resolved");
                            return false;

                        case 1:
                            goto Label_015B;
                    }
                    return false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
            }

            [DebuggerHidden]
            IEnumerator<LazyTacny.Solution> IEnumerable<LazyTacny.Solution>.GetEnumerator()
            {
                LazyTacny.Atomic.<ResolveBody>d__15 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<ResolveBody>d__15(0) {
                        <>4__this = this.<>4__this
                    };
                }
                d__.body = this.<>3__body;
                IEnumerator<LazyTacny.Solution> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<LazyTacny.Solution>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                switch (this.<>1__state)
                {
                    case -3:
                    case 1:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            LazyTacny.Solution IEnumerator<LazyTacny.Solution>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <ResolveStatement>d__16 : IEnumerable<LazyTacny.Solution>, IEnumerable, IEnumerator<LazyTacny.Solution>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private LazyTacny.Solution <>2__current;
            public LazyTacny.Solution <>3__solution;
            private int <>l__initialThreadId;
            private IEnumerator<LazyTacny.Solution> <>s__1;
            private LazyTacny.Solution <result>5__2;
            private LazyTacny.Solution solution;

            [DebuggerHidden]
            public <ResolveStatement>d__16(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                if (this.<>s__1 != null)
                {
                    this.<>s__1.Dispose();
                }
            }

            private bool MoveNext()
            {
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                            this.<>1__state = -1;
                            if (!this.solution.state.DynamicContext.IsResolved())
                            {
                                if (this.solution.state.DynamicContext.IsFirstStatment())
                                {
                                    LazyTacny.TacnyContract.ValidateRequires(this.solution);
                                }
                                this.<>s__1 = this.solution.state.CallAction(this.solution.state.DynamicContext.GetCurrentStatement(), this.solution).GetEnumerator();
                                this.<>1__state = -3;
                                while (this.<>s__1.MoveNext())
                                {
                                    this.<result>5__2 = this.<>s__1.Current;
                                    this.<result>5__2.parent = this.solution;
                                    if (!this.<result>5__2.state.DynamicContext.isPartialyResolved)
                                    {
                                        this.<result>5__2.state.DynamicContext.IncCounter();
                                    }
                                    this.<>2__current = this.<result>5__2;
                                    this.<>1__state = 1;
                                    return true;
                                Label_013A:
                                    this.<>1__state = -3;
                                    this.<result>5__2 = null;
                                }
                                this.<>m__Finally1();
                                this.<>s__1 = null;
                            }
                            return false;

                        case 1:
                            goto Label_013A;
                    }
                    return false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
            }

            [DebuggerHidden]
            IEnumerator<LazyTacny.Solution> IEnumerable<LazyTacny.Solution>.GetEnumerator()
            {
                LazyTacny.Atomic.<ResolveStatement>d__16 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<ResolveStatement>d__16(0);
                }
                d__.solution = this.<>3__solution;
                IEnumerator<LazyTacny.Solution> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<LazyTacny.Solution>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                switch (this.<>1__state)
                {
                    case -3:
                    case 1:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            LazyTacny.Solution IEnumerator<LazyTacny.Solution>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <ResolveTacticFunction>d__14 : IEnumerable<LazyTacny.Solution>, IEnumerable, IEnumerator<LazyTacny.Solution>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private LazyTacny.Solution <>2__current;
            public LazyTacny.Atomic <>3__atomic;
            private int <>l__initialThreadId;
            private IEnumerator<ExpressionTree> <>s__3;
            private LazyTacny.Atomic <ac>5__5;
            private ExpressionTree <expt>5__2;
            private ExpressionTree <result>5__4;
            private TacticFunction <tacFun>5__1;
            private LazyTacny.Atomic atomic;

            [DebuggerHidden]
            public <ResolveTacticFunction>d__14(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                if (this.<>s__3 != null)
                {
                    this.<>s__3.Dispose();
                }
            }

            private bool MoveNext()
            {
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                            this.<>1__state = -1;
                            this.<tacFun>5__1 = this.atomic.DynamicContext.tactic as TacticFunction;
                            this.<expt>5__2 = ExpressionTree.ExpressionToTree(this.<tacFun>5__1.Body);
                            this.<>s__3 = this.atomic.ResolveTacticFunction(this.<expt>5__2).GetEnumerator();
                            this.<>1__state = -3;
                            while (this.<>s__3.MoveNext())
                            {
                                this.<result>5__4 = this.<>s__3.Current;
                                this.<ac>5__5 = this.atomic.Copy();
                                this.<ac>5__5.DynamicContext.generatedExpressions.Add(this.<result>5__4.TreeToExpression());
                                this.<>2__current = new LazyTacny.Solution(this.<ac>5__5, null);
                                this.<>1__state = 1;
                                return true;
                            Label_00F6:
                                this.<>1__state = -3;
                                this.<ac>5__5 = null;
                                this.<result>5__4 = null;
                            }
                            this.<>m__Finally1();
                            this.<>s__3 = null;
                            return false;

                        case 1:
                            goto Label_00F6;
                    }
                    return false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
            }

            [DebuggerHidden]
            IEnumerator<LazyTacny.Solution> IEnumerable<LazyTacny.Solution>.GetEnumerator()
            {
                LazyTacny.Atomic.<ResolveTacticFunction>d__14 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<ResolveTacticFunction>d__14(0);
                }
                d__.atomic = this.<>3__atomic;
                IEnumerator<LazyTacny.Solution> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<LazyTacny.Solution>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                switch (this.<>1__state)
                {
                    case -3:
                    case 1:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            LazyTacny.Solution IEnumerator<LazyTacny.Solution>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <ResolveTacticMethod>d__13 : IEnumerable<LazyTacny.Solution>, IEnumerable, IEnumerator<LazyTacny.Solution>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private LazyTacny.Solution <>2__current;
            public LazyTacny.Atomic <>3__atomic;
            public bool <>3__verify;
            private int <>l__initialThreadId;
            private IEnumerator<LazyTacny.Solution> <>s__2;
            private LazyTacny.Solution <item>5__3;
            private ISearch <searchStrategy>5__1;
            private LazyTacny.Atomic atomic;
            private bool verify;

            [DebuggerHidden]
            public <ResolveTacticMethod>d__13(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                if (this.<>s__2 != null)
                {
                    this.<>s__2.Dispose();
                }
            }

            private bool MoveNext()
            {
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                            this.<>1__state = -1;
                            if (this.atomic.DynamicContext.tactic is Tactic)
                            {
                                this.<searchStrategy>5__1 = new SearchStrategy(this.atomic.SearchStrat);
                                this.<>s__2 = this.<searchStrategy>5__1.Search(this.atomic, this.verify).GetEnumerator();
                                this.<>1__state = -3;
                                while (this.<>s__2.MoveNext())
                                {
                                    this.<item>5__3 = this.<>s__2.Current;
                                    this.<>2__current = this.<item>5__3;
                                    this.<>1__state = 1;
                                    return true;
                                Label_00C7:
                                    this.<>1__state = -3;
                                    this.<item>5__3 = null;
                                }
                                this.<>m__Finally1();
                                this.<>s__2 = null;
                                this.<searchStrategy>5__1 = null;
                            }
                            return false;

                        case 1:
                            goto Label_00C7;
                    }
                    return false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
            }

            [DebuggerHidden]
            IEnumerator<LazyTacny.Solution> IEnumerable<LazyTacny.Solution>.GetEnumerator()
            {
                LazyTacny.Atomic.<ResolveTacticMethod>d__13 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<ResolveTacticMethod>d__13(0);
                }
                d__.atomic = this.<>3__atomic;
                d__.verify = this.<>3__verify;
                IEnumerator<LazyTacny.Solution> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<LazyTacny.Solution>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                switch (this.<>1__state)
                {
                    case -3:
                    case 1:
                        try
                        {
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            LazyTacny.Solution IEnumerator<LazyTacny.Solution>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <UpdateLocalVariable>d__22 : IEnumerable<LazyTacny.Solution>, IEnumerable, IEnumerator<LazyTacny.Solution>, IDisposable, IEnumerator
        {
            private int <>1__state;
            private LazyTacny.Solution <>2__current;
            public UpdateStmt <>3__updateStmt;
            public LazyTacny.Atomic <>4__this;
            private int <>l__initialThreadId;
            private List<AssignmentRhs>.Enumerator <>s__4;
            private IEnumerator<object> <>s__8;
            private ExprRhs <exprRhs>5__6;
            private int <i>5__1;
            private AssignmentRhs <item>5__5;
            private Microsoft.Dafny.LiteralExpr <litVal>5__7;
            private IVariable <local>5__3;
            private object <result>5__9;
            private NameSegment <variable>5__2;
            private UpdateStmt updateStmt;

            [DebuggerHidden]
            public <UpdateLocalVariable>d__22(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Thread.CurrentThread.ManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                this.<>s__4.Dispose();
            }

            private void <>m__Finally2()
            {
                this.<>1__state = -3;
                if (this.<>s__8 != null)
                {
                    this.<>s__8.Dispose();
                }
            }

            private bool MoveNext()
            {
                try
                {
                    switch (this.<>1__state)
                    {
                        case 0:
                            this.<>1__state = -1;
                            Debug.WriteLine("Updating local variable");
                            System.Diagnostics.Contracts.__ContractsRuntime.Assert(this.updateStmt.Lhss.Count == this.updateStmt.Rhss.Count, Util.Error.MkErr(this.updateStmt, 8, new object[0]), "updateStmt.Lhss.Count == updateStmt.Rhss.Count");
                            this.<i>5__1 = 0;
                            while (this.<i>5__1 < this.updateStmt.Lhss.Count)
                            {
                                this.<variable>5__2 = this.updateStmt.Lhss[this.<i>5__1] as NameSegment;
                                object[] args = new object[] { typeof(NameSegment), this.updateStmt.Lhss[this.<i>5__1].GetType() };
                                System.Diagnostics.Contracts.__ContractsRuntime.Assert(this.<variable>5__2 > null, Util.Error.MkErr(this.updateStmt, 5, args), "variable != null");
                                object[] objArray2 = new object[] { this.<variable>5__2.Name };
                                System.Diagnostics.Contracts.__ContractsRuntime.Assert(this.<>4__this.HasLocalWithName(this.<variable>5__2), Util.Error.MkErr(this.updateStmt, 9, objArray2), "HasLocalWithName(variable)");
                                this.<local>5__3 = this.<>4__this.GetLocalKeyByName(this.<variable>5__2);
                                this.<>s__4 = this.updateStmt.Rhss.GetEnumerator();
                                this.<>1__state = -3;
                                while (this.<>s__4.MoveNext())
                                {
                                    this.<item>5__5 = this.<>s__4.Current;
                                    this.<exprRhs>5__6 = this.<item>5__5 as ExprRhs;
                                    if (this.<exprRhs>5__6 <= null)
                                    {
                                        goto Label_02D5;
                                    }
                                    this.<litVal>5__7 = this.<exprRhs>5__6.Expr as Microsoft.Dafny.LiteralExpr;
                                    if (this.<litVal>5__7 <= null)
                                    {
                                        goto Label_0222;
                                    }
                                    this.<>4__this.AddLocal(this.<local>5__3, this.<litVal>5__7);
                                    this.<>2__current = new LazyTacny.Solution(this.<>4__this.Copy(), null);
                                    this.<>1__state = 1;
                                    return true;
                                Label_0214:
                                    this.<>1__state = -3;
                                    goto Label_02CD;
                                Label_0222:
                                    this.<>s__8 = this.<>4__this.ProcessStmtArgument(this.<exprRhs>5__6.Expr).GetEnumerator();
                                    this.<>1__state = -4;
                                    while (this.<>s__8.MoveNext())
                                    {
                                        this.<result>5__9 = this.<>s__8.Current;
                                        this.<>4__this.AddLocal(this.<local>5__3, this.<result>5__9);
                                        this.<>2__current = new LazyTacny.Solution(this.<>4__this.Copy(), null);
                                        this.<>1__state = 2;
                                        return true;
                                    Label_02A1:
                                        this.<>1__state = -4;
                                        this.<result>5__9 = null;
                                    }
                                    this.<>m__Finally2();
                                    this.<>s__8 = null;
                                Label_02CD:
                                    this.<litVal>5__7 = null;
                                Label_02D5:
                                    this.<exprRhs>5__6 = null;
                                    this.<item>5__5 = null;
                                }
                                this.<>m__Finally1();
                                this.<>s__4 = new List<AssignmentRhs>.Enumerator();
                                this.<variable>5__2 = null;
                                this.<local>5__3 = null;
                                int num2 = this.<i>5__1;
                                this.<i>5__1 = num2 + 1;
                            }
                            return false;

                        case 1:
                            goto Label_0214;

                        case 2:
                            goto Label_02A1;
                    }
                    return false;
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
            }

            [DebuggerHidden]
            IEnumerator<LazyTacny.Solution> IEnumerable<LazyTacny.Solution>.GetEnumerator()
            {
                LazyTacny.Atomic.<UpdateLocalVariable>d__22 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Thread.CurrentThread.ManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new LazyTacny.Atomic.<UpdateLocalVariable>d__22(0) {
                        <>4__this = this.<>4__this
                    };
                }
                d__.updateStmt = this.<>3__updateStmt;
                IEnumerator<LazyTacny.Solution> enumerator = d__;
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator<T>>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator()
            {
                IEnumerator enumerator = this.System.Collections.Generic.IEnumerable<LazyTacny.Solution>.GetEnumerator();
                System.Diagnostics.Contracts.__ContractsRuntime.Ensures(enumerator != null, null, "Contract.Result<IEnumerator>() != null");
                return enumerator;
            }

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                int num = this.<>1__state;
                switch (num)
                {
                    case -4:
                    case -3:
                    case 1:
                    case 2:
                        try
                        {
                            switch (num)
                            {
                                case -4:
                                case 2:
                                    try
                                    {
                                    }
                                    finally
                                    {
                                        this.<>m__Finally2();
                                    }
                                    break;
                            }
                        }
                        finally
                        {
                            this.<>m__Finally1();
                        }
                        break;
                }
            }

            LazyTacny.Solution IEnumerator<LazyTacny.Solution>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }
    }
}
